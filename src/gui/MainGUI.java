package gui;

import agent.Agent;
import agent.Belief;
import agent.Desire;
import agent.Intention;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import javax.swing.BorderFactory;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.SwingWorker;
import utilities.consoleredirect.MessageConsole;
import world.Place;
import world.World;

/**
 * This class is used for the GUI of our project and the translation from lists
 * to the actual GUI world.
 *
 * @author Kanakari Maria
 * @author Kanellis Dimitris
 */
public class MainGUI extends JFrame {

    /**
     * Creates new form GUI
     */
    public MainGUI() {
        initComponents();

        jMessageConsoleTextPane.putClientProperty(JEditorPane.HONOR_DISPLAY_PROPERTIES, Boolean.TRUE);
        _mc = new MessageConsole(jMessageConsoleTextPane, true);
        _mc.redirectOut(null, null);
        _mc.redirectErr(Color.RED, null);
        _mc.setMessageLines(1000);

        _longSeed = System.currentTimeMillis();
        _round = 0;
        _agentTurn = 0;
        _gameInProgress = false;

        _rand = new Random();
        _rand.setSeed(_longSeed);

        _worldList = new ArrayList<>();
        initializeRowsAndColumns();
        _world = new World(5, 5, _rand);
        _agentList = new ArrayList<>();

        initializeAgents();
        initializeClients();
        updateWorld();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMainPanel = new javax.swing.JPanel();
        jWorldInterfacePanel = new javax.swing.JPanel();
        jRowNumberPanel = new javax.swing.JPanel();
        jRow0Label = new javax.swing.JLabel();
        jRow1Label = new javax.swing.JLabel();
        jRow2Label = new javax.swing.JLabel();
        jRow3Label = new javax.swing.JLabel();
        jRow4Label = new javax.swing.JLabel();
        jColumnNumberPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jWorldPanel = new javax.swing.JPanel();
        jTextField00 = new javax.swing.JTextField();
        jTextField01 = new javax.swing.JTextField();
        jTextField02 = new javax.swing.JTextField();
        jTextField03 = new javax.swing.JTextField();
        jTextField04 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jTextField11 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jTextField13 = new javax.swing.JTextField();
        jTextField14 = new javax.swing.JTextField();
        jTextField20 = new javax.swing.JTextField();
        jTextField21 = new javax.swing.JTextField();
        jTextField22 = new javax.swing.JTextField();
        jTextField23 = new javax.swing.JTextField();
        jTextField24 = new javax.swing.JTextField();
        jTextField30 = new javax.swing.JTextField();
        jTextField31 = new javax.swing.JTextField();
        jTextField32 = new javax.swing.JTextField();
        jTextField33 = new javax.swing.JTextField();
        jTextField34 = new javax.swing.JTextField();
        jTextField40 = new javax.swing.JTextField();
        jTextField41 = new javax.swing.JTextField();
        jTextField42 = new javax.swing.JTextField();
        jTextField43 = new javax.swing.JTextField();
        jTextField44 = new javax.swing.JTextField();
        jHeaderPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jSpeedLabel = new javax.swing.JLabel();
        jSpeedSpinner = new javax.swing.JSpinner();
        jScorePanel = new javax.swing.JPanel();
        jRoostersScoreLabel = new javax.swing.JLabel();
        jDonkeysScoreLabel = new javax.swing.JLabel();
        jDonkeysScoreField = new javax.swing.JTextField();
        jRoostersScoreField = new javax.swing.JTextField();
        jButtonsPanel = new javax.swing.JPanel();
        jRestartButton = new javax.swing.JButton();
        jStartButton = new javax.swing.JToggleButton();
        jNextMoveButton = new javax.swing.JButton();
        jMessageConsoleScrollPane = new javax.swing.JScrollPane();
        jMessageConsoleTextPane = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        setMaximumSize(new java.awt.Dimension(1044, 700));
        setMinimumSize(new java.awt.Dimension(1044, 700));

        jMainPanel.setBackground(new java.awt.Color(220, 243, 250));
        jMainPanel.setMaximumSize(new java.awt.Dimension(1044, 700));
        jMainPanel.setMinimumSize(new java.awt.Dimension(1044, 700));
        jMainPanel.setPreferredSize(new java.awt.Dimension(1044, 700));

        jWorldInterfacePanel.setBackground(new java.awt.Color(220, 243, 250));
        jWorldInterfacePanel.setPreferredSize(new java.awt.Dimension(620, 620));

        jRowNumberPanel.setBackground(new java.awt.Color(220, 243, 250));
        jRowNumberPanel.setLayout(new java.awt.GridLayout(5, 1));

        jRow0Label.setFont(getFont());
        jRow0Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jRow0Label.setText("0");
        jRowNumberPanel.add(jRow0Label);

        jRow1Label.setFont(getFont());
        jRow1Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jRow1Label.setText("1");
        jRowNumberPanel.add(jRow1Label);

        jRow2Label.setFont(getFont());
        jRow2Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jRow2Label.setText("2");
        jRowNumberPanel.add(jRow2Label);

        jRow3Label.setFont(getFont());
        jRow3Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jRow3Label.setText("3");
        jRowNumberPanel.add(jRow3Label);

        jRow4Label.setFont(getFont());
        jRow4Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jRow4Label.setText("4");
        jRowNumberPanel.add(jRow4Label);

        jColumnNumberPanel.setBackground(new java.awt.Color(220, 243, 250));
        jColumnNumberPanel.setLayout(new java.awt.GridLayout(1, 5));

        jLabel1.setFont(getFont());
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("0");
        jColumnNumberPanel.add(jLabel1);

        jLabel3.setFont(getFont());
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("1");
        jColumnNumberPanel.add(jLabel3);

        jLabel4.setFont(getFont());
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("2");
        jColumnNumberPanel.add(jLabel4);

        jLabel5.setFont(getFont());
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("3");
        jColumnNumberPanel.add(jLabel5);

        jLabel2.setFont(getFont());
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("4");
        jColumnNumberPanel.add(jLabel2);

        jWorldPanel.setBackground(new java.awt.Color(220, 243, 250));
        jWorldPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "World", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jWorldPanel.setFont(getFont());
        jWorldPanel.setLayout(new java.awt.GridLayout(5, 5));

        jTextField00.setEditable(false);
        jTextField00.setBackground(new java.awt.Color(150, 0, 0));
        jTextField00.setFont(getFont());
        jTextField00.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField00.setBorder(javax.swing.BorderFactory.createMatteBorder(6, 6, 1, 1, new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField00);

        jTextField01.setEditable(false);
        jTextField01.setBackground(new java.awt.Color(150, 150, 150));
        jTextField01.setFont(getFont());
        jTextField01.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField01.setBorder(javax.swing.BorderFactory.createMatteBorder(6, 1, 1, 3, new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField01);

        jTextField02.setEditable(false);
        jTextField02.setBackground(new java.awt.Color(150, 150, 150));
        jTextField02.setFont(getFont());
        jTextField02.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField02.setBorder(javax.swing.BorderFactory.createMatteBorder(6, 3, 1, 1, new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField02);

        jTextField03.setEditable(false);
        jTextField03.setBackground(new java.awt.Color(150, 150, 150));
        jTextField03.setFont(getFont());
        jTextField03.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField03.setBorder(javax.swing.BorderFactory.createMatteBorder(6, 1, 1, 1, new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField03);

        jTextField04.setEditable(false);
        jTextField04.setBackground(new java.awt.Color(0, 150, 0));
        jTextField04.setFont(getFont());
        jTextField04.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField04.setBorder(javax.swing.BorderFactory.createMatteBorder(6, 1, 1, 6, new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField04);

        jTextField10.setEditable(false);
        jTextField10.setBackground(new java.awt.Color(150, 150, 150));
        jTextField10.setFont(getFont());
        jTextField10.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField10.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 6, 1, 1, new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField10);

        jTextField11.setEditable(false);
        jTextField11.setBackground(new java.awt.Color(150, 150, 150));
        jTextField11.setFont(getFont());
        jTextField11.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField11.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 3, new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField11);

        jTextField12.setEditable(false);
        jTextField12.setBackground(new java.awt.Color(150, 150, 150));
        jTextField12.setFont(getFont());
        jTextField12.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField12.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 3, 1, 1, new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField12);

        jTextField13.setEditable(false);
        jTextField13.setBackground(new java.awt.Color(150, 150, 150));
        jTextField13.setFont(getFont());
        jTextField13.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField13);

        jTextField14.setEditable(false);
        jTextField14.setBackground(new java.awt.Color(150, 150, 150));
        jTextField14.setFont(getFont());
        jTextField14.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField14.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 6, new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField14);

        jTextField20.setEditable(false);
        jTextField20.setBackground(new java.awt.Color(150, 150, 150));
        jTextField20.setFont(getFont());
        jTextField20.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField20.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 6, 1, 1, new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField20);

        jTextField21.setEditable(false);
        jTextField21.setBackground(new java.awt.Color(150, 150, 150));
        jTextField21.setFont(getFont());
        jTextField21.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField21.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField21);

        jTextField22.setEditable(false);
        jTextField22.setBackground(new java.awt.Color(150, 150, 150));
        jTextField22.setFont(getFont());
        jTextField22.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField22.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField22);

        jTextField23.setEditable(false);
        jTextField23.setBackground(new java.awt.Color(150, 150, 150));
        jTextField23.setFont(getFont());
        jTextField23.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField23.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField23);

        jTextField24.setEditable(false);
        jTextField24.setBackground(new java.awt.Color(150, 150, 150));
        jTextField24.setFont(getFont());
        jTextField24.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField24.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 6, new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField24);

        jTextField30.setEditable(false);
        jTextField30.setBackground(new java.awt.Color(150, 150, 150));
        jTextField30.setFont(getFont());
        jTextField30.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField30.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 6, 1, 3, new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField30);

        jTextField31.setEditable(false);
        jTextField31.setBackground(new java.awt.Color(150, 150, 150));
        jTextField31.setFont(getFont());
        jTextField31.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField31.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 3, 1, 1, new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField31);

        jTextField32.setEditable(false);
        jTextField32.setBackground(new java.awt.Color(150, 150, 150));
        jTextField32.setFont(getFont());
        jTextField32.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField32.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 3, new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField32);

        jTextField33.setEditable(false);
        jTextField33.setBackground(new java.awt.Color(150, 150, 150));
        jTextField33.setFont(getFont());
        jTextField33.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField33.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 3, 1, 1, new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField33);

        jTextField34.setEditable(false);
        jTextField34.setBackground(new java.awt.Color(150, 150, 150));
        jTextField34.setFont(getFont());
        jTextField34.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField34.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 6, new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField34);

        jTextField40.setEditable(false);
        jTextField40.setBackground(new java.awt.Color(255, 150, 0));
        jTextField40.setFont(getFont());
        jTextField40.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField40.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 6, 6, 3, new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField40);

        jTextField41.setEditable(false);
        jTextField41.setBackground(new java.awt.Color(150, 150, 150));
        jTextField41.setFont(getFont());
        jTextField41.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField41.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 3, 6, 1, new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField41);

        jTextField42.setEditable(false);
        jTextField42.setBackground(new java.awt.Color(150, 150, 150));
        jTextField42.setFont(getFont());
        jTextField42.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField42.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 6, 3, new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField42);

        jTextField43.setEditable(false);
        jTextField43.setBackground(new java.awt.Color(0, 0, 150));
        jTextField43.setFont(getFont());
        jTextField43.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField43.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 3, 6, 1, new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField43);

        jTextField44.setEditable(false);
        jTextField44.setBackground(new java.awt.Color(150, 150, 150));
        jTextField44.setFont(getFont());
        jTextField44.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField44.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 6, 6, new java.awt.Color(0, 0, 0)));
        jWorldPanel.add(jTextField44);

        javax.swing.GroupLayout jWorldInterfacePanelLayout = new javax.swing.GroupLayout(jWorldInterfacePanel);
        jWorldInterfacePanel.setLayout(jWorldInterfacePanelLayout);
        jWorldInterfacePanelLayout.setHorizontalGroup(
            jWorldInterfacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jWorldInterfacePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRowNumberPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jWorldPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jWorldInterfacePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jColumnNumberPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
        jWorldInterfacePanelLayout.setVerticalGroup(
            jWorldInterfacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jWorldInterfacePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jColumnNumberPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jWorldPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jWorldInterfacePanelLayout.createSequentialGroup()
                .addContainerGap(91, Short.MAX_VALUE)
                .addComponent(jRowNumberPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        jHeaderPanel.setBackground(new java.awt.Color(220, 243, 250));

        jPanel1.setBackground(new java.awt.Color(220, 243, 250));

        jSpeedLabel.setFont(getFont());
        jSpeedLabel.setText("Delay (ms):");

        jSpeedSpinner.setFont(getFont());
        jSpeedSpinner.setModel(new javax.swing.SpinnerNumberModel(1000, 200, 10000, 100));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSpeedLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpeedSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpeedLabel)
                    .addComponent(jSpeedSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScorePanel.setBackground(new java.awt.Color(220, 243, 250));
        jScorePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Round " + Integer.toString(_round), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, getFont()));
        jScorePanel.setFont(getFont());

        jRoostersScoreLabel.setFont(getFont());
        jRoostersScoreLabel.setForeground(new java.awt.Color(255, 0, 0));
        jRoostersScoreLabel.setLabelFor(jRoostersScoreField);
        jRoostersScoreLabel.setText("Roosters:");

        jDonkeysScoreLabel.setFont(getFont());
        jDonkeysScoreLabel.setForeground(new java.awt.Color(0, 102, 255));
        jDonkeysScoreLabel.setLabelFor(jDonkeysScoreField);
        jDonkeysScoreLabel.setText("Donkeys:");

        jDonkeysScoreField.setEditable(false);
        jDonkeysScoreField.setFont(getFont());
        jDonkeysScoreField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jDonkeysScoreField.setText("0");

        jRoostersScoreField.setEditable(false);
        jRoostersScoreField.setFont(getFont());
        jRoostersScoreField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jRoostersScoreField.setText("0");

        javax.swing.GroupLayout jScorePanelLayout = new javax.swing.GroupLayout(jScorePanel);
        jScorePanel.setLayout(jScorePanelLayout);
        jScorePanelLayout.setHorizontalGroup(
            jScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jScorePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jRoostersScoreLabel)
                    .addComponent(jDonkeysScoreLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDonkeysScoreField, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRoostersScoreField, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jScorePanelLayout.setVerticalGroup(
            jScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jScorePanelLayout.createSequentialGroup()
                .addGroup(jScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRoostersScoreLabel)
                    .addComponent(jRoostersScoreField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jDonkeysScoreField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDonkeysScoreLabel)))
        );

        javax.swing.GroupLayout jHeaderPanelLayout = new javax.swing.GroupLayout(jHeaderPanel);
        jHeaderPanel.setLayout(jHeaderPanelLayout);
        jHeaderPanelLayout.setHorizontalGroup(
            jHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jHeaderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScorePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jHeaderPanelLayout.setVerticalGroup(
            jHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jHeaderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jHeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScorePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jButtonsPanel.setBackground(new java.awt.Color(220, 243, 250));
        jButtonsPanel.setLayout(new java.awt.GridLayout(1, 3, 13, 0));

        jRestartButton.setFont(getFont());
        jRestartButton.setText("Restart");
        jRestartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRestartButtonActionPerformed(evt);
            }
        });
        jButtonsPanel.add(jRestartButton);

        jStartButton.setFont(getFont());
        jStartButton.setText("Press to Start");
        jStartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jStartButtonActionPerformed(evt);
            }
        });
        jButtonsPanel.add(jStartButton);

        jNextMoveButton.setFont(getFont());
        jNextMoveButton.setText("Next Move");
        jNextMoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNextMoveButtonActionPerformed(evt);
            }
        });
        jButtonsPanel.add(jNextMoveButton);

        jMessageConsoleScrollPane.setBackground(new java.awt.Color(220, 243, 250));

        jMessageConsoleTextPane.setBackground(new java.awt.Color(196, 235, 233));
        jMessageConsoleTextPane.setFont(getFont());
        jMessageConsoleScrollPane.setViewportView(jMessageConsoleTextPane);

        javax.swing.GroupLayout jMainPanelLayout = new javax.swing.GroupLayout(jMainPanel);
        jMainPanel.setLayout(jMainPanelLayout);
        jMainPanelLayout.setHorizontalGroup(
            jMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jMainPanelLayout.createSequentialGroup()
                .addGroup(jMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jMainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jWorldInterfacePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE)
                            .addComponent(jHeaderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jMainPanelLayout.createSequentialGroup()
                        .addContainerGap(94, Short.MAX_VALUE)
                        .addComponent(jButtonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)))
                .addComponent(jMessageConsoleScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jMainPanelLayout.setVerticalGroup(
            jMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jMessageConsoleScrollPane)
                    .addGroup(jMainPanelLayout.createSequentialGroup()
                        .addComponent(jHeaderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jWorldInterfacePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Initializes the rows and columns of the GUI.
     */
    private void initializeRowsAndColumns() {
        List<JTextField> line0 = new ArrayList<JTextField>() {
            {
                add(jTextField00);
                add(jTextField01);
                add(jTextField02);
                add(jTextField03);
                add(jTextField04);
            }
        };
        List<JTextField> line1 = new ArrayList<JTextField>() {
            {
                add(jTextField10);
                add(jTextField11);
                add(jTextField12);
                add(jTextField13);
                add(jTextField14);
            }
        };
        List<JTextField> line2 = new ArrayList<JTextField>() {
            {
                add(jTextField20);
                add(jTextField21);
                add(jTextField22);
                add(jTextField23);
                add(jTextField24);
            }
        };
        List<JTextField> line3 = new ArrayList<JTextField>() {
            {
                add(jTextField30);
                add(jTextField31);
                add(jTextField32);
                add(jTextField33);
                add(jTextField34);
            }
        };
        List<JTextField> line4 = new ArrayList<JTextField>() {
            {
                add(jTextField40);
                add(jTextField41);
                add(jTextField42);
                add(jTextField43);
                add(jTextField44);
            }
        };

        _worldList.add(line0);
        _worldList.add(line1);
        _worldList.add(line2);
        _worldList.add(line3);
        _worldList.add(line4);
    }

    /**
     * Initializes the agents of the project. The cases are:
     *
     * 1. Two Roosters and one Donkey 2. Two Donkeys and one Rooster 3. Two
     * Donkeys and two Roosters
     */
    private void initializeAgents() {
        final int randInt = _rand.nextInt(101);
        if (randInt > 50) { // 3 agents
            if (randInt > 50) { // 2 roosters
                _agentList.add(new Agent("R", 1, _rand));
                _agentList.add(new Agent("R", 2, _rand));
                _agentList.add(new Agent("D", 1, _rand));
            } else { // 2 donkeys
                _agentList.add(new Agent("D", 1, _rand));
                _agentList.add(new Agent("D", 2, _rand));
                _agentList.add(new Agent("R", 1, _rand));
            }
        } else { // 4 agents
            _agentList.add(new Agent("D", 1, _rand));
            _agentList.add(new Agent("D", 2, _rand));
            _agentList.add(new Agent("R", 1, _rand));
            _agentList.add(new Agent("R", 2, _rand));
        }

        for (Agent agent : _agentList) {
            for (Agent secondAgent : _agentList) {
                if (agent.getTeam().equals(secondAgent.getTeam())) {
                    agent.addTeamate(secondAgent);
                }
            }
            agent.setPlaces(_world.getPlaces());

            agent.initializeState(
                    new Belief(_world.setRandomAgent(agent)),
                    new Desire(Intention.GET_HIGHEST_SCORE_NAME));
            agent.getBelief().setVisiblePlaces(agent.getPlaces());
        }
    }

    /**
     * Initializes the clients of the project.
     */
    private void initializeClients() {
        _world.setRandomClients();
    }

    /**
     * In case of the ending of a game the winner is announce depending on the
     * score and the winners desire is set to true.
     */
    private void gameEnded() {
        jStartButton.setText("Press to Start");
        jStartButton.setEnabled(false);
        jNextMoveButton.setEnabled(false);
        jRestartButton.setEnabled(true);
        if (Integer.parseInt(jRoostersScoreField.getText()) > Integer.parseInt(jDonkeysScoreField.getText())) {
            for (Agent agent : _agentList) {
                if (agent.getTeam().equals("R")) {
                    agent.getBelief().setDesireComplete(true);
                }
            }
            System.out.println("--------------------------------------------------------------------------------");
            System.out.println("--------------------------------------------------------------------------------");
            System.out.println("-----------------------------Roosters Won!!!!-----------------------------");
            System.out.println("--------------------------------------------------------------------------------");
            System.out.println("--------------------------------------------------------------------------------");
        } else {
            for (Agent agent : _agentList) {
                if (agent.getTeam().equals("D")) {
                    agent.getBelief().setDesireComplete(true);
                }
            }
            System.out.println("--------------------------------------------------------------------------------");
            System.out.println("--------------------------------------------------------------------------------");
            System.out.println("------------------------------Donkeys Won!!!!-----------------------------");
            System.out.println("--------------------------------------------------------------------------------");
            System.out.println("--------------------------------------------------------------------------------");
        }
    }

    /**
     * Updates the GUI world according to the current world.
     */
    private void updateWorld() {
        for (Place place : _world.getPlaces()) {
            String cellState = " ";

            for (int i = 0; i < place.getClientList().size(); i++) {
                cellState = cellState.concat("*");
            }

            for (Agent agent : place.getAgentList()) {
                cellState = cellState.concat(agent.getName() + agent.modeToString());
            }

            updateCell(place.getCoords().getX(), place.getCoords().getY(), cellState);
        }

        jRoostersScoreField.setText("0");
        jDonkeysScoreField.setText("0");
        for (Agent agent : _agentList) {
            if (agent.getTeam().equals("R")) {
                jRoostersScoreField.setText(Integer.toString(Integer.parseInt(jRoostersScoreField.getText()) + agent.getScore()));
            } else {
                jDonkeysScoreField.setText(Integer.toString(Integer.parseInt(jDonkeysScoreField.getText()) + agent.getScore()));
            }

            for (Place visiblePlace : agent.getBelief().getVisiblePlaces()) {
                updateCell(visiblePlace.getCoords().getX(), visiblePlace.getCoords().getY());
            }
        }
    }

    /**
     * Updates the cell of the GUI world with the appropriate text and color in
     * it.
     */
    private void updateCell(final int x, final int y, final String field) {
        _worldList.get(x).get(y).setText(field);

        if (x == 0 && y == 0) {
            _worldList.get(x).get(y).setBackground(new java.awt.Color(150, 0, 0));
        } else if (x == 4 && y == 0) {
            _worldList.get(x).get(y).setBackground(new java.awt.Color(255, 150, 0));
        } else if (x == 0 && y == 4) {
            _worldList.get(x).get(y).setBackground(new java.awt.Color(0, 150, 0));
        } else if (x == 4 && y == 3) {
            _worldList.get(x).get(y).setBackground(new java.awt.Color(0, 0, 150));
        } else {
            _worldList.get(x).get(y).setBackground(Color.gray);
        }
    }

    /**
     * Works like #updateCell(int, int, java.lang.String) but this one only
     * updates the colors.
     *
     * @see #updateCell(int, int, java.lang.String)
     */
    private void updateCell(final int x, final int y) {
        if (x == 0 && y == 0) {
            _worldList.get(x).get(y).setBackground(Color.RED);
        } else if (x == 4 && y == 0) {
            _worldList.get(x).get(y).setBackground(Color.YELLOW);
        } else if (x == 0 && y == 4) {
            _worldList.get(x).get(y).setBackground(Color.GREEN);
        } else if (x == 4 && y == 3) {
            _worldList.get(x).get(y).setBackground(Color.CYAN);
        } else {
            _worldList.get(x).get(y).setBackground(Color.WHITE);
        }
    }

    private void jNextMoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNextMoveButtonActionPerformed
        if (_agentTurn > _agentList.size() - 1) {
            _agentTurn = 0;
        }

        if (_round % 10 == 0) {
            _world.setRandomClients();
        }
        System.out.println("------------------------------Round " + Integer.toString(_round) + "------------------------------");
        _agentList.get(_agentTurn++).go();

        jScorePanel.setBorder(BorderFactory.createTitledBorder("Round " + Integer.toString(++_round)));
        if (_agentTurn == _agentList.size()) {
            jStartButton.setEnabled(true);
        } else {
            jStartButton.setEnabled(false);
        }
        updateWorld();

        if (_round >= MAX_ROUNDS_MULTIPLIER * _agentList.size()) {
            gameEnded();
        }
    }//GEN-LAST:event_jNextMoveButtonActionPerformed

    private void jRestartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRestartButtonActionPerformed
        _longSeed = System.currentTimeMillis();
        _rand.setSeed(_longSeed);

        _worldList = new ArrayList<>();
        initializeRowsAndColumns();
        _world = new World(5, 5, _rand);

        _agentList = new ArrayList<>();
        initializeAgents();

        initializeClients();

        _round = 0;
        _agentTurn = 0;
        _gameInProgress = false;

        jScorePanel.setBorder(BorderFactory.createTitledBorder("Round " + Integer.toString(_round)));
        jMessageConsoleTextPane.setText("");
        jNextMoveButton.setEnabled(true);
        jStartButton.setEnabled(true);
        updateWorld();
    }//GEN-LAST:event_jRestartButtonActionPerformed

    private void jStartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStartButtonActionPerformed
        _gameInProgress = !_gameInProgress;

        if (_gameInProgress) {
            jStartButton.setText("Press to Pause");
            jRestartButton.setEnabled(false);
            jNextMoveButton.setEnabled(false);
            new AgentWorker().execute();
        } else {
            jStartButton.setText("Press to Start");
        }
    }//GEN-LAST:event_jStartButtonActionPerformed

    class AgentWorker extends SwingWorker<Void, Integer> {

        protected Void doInBackground() throws Exception {
            while (_gameInProgress && _round < MAX_ROUNDS_MULTIPLIER * _agentList.size()) {
                for (Agent agent : _agentList) {
                    if (_round % 10 == 0) {
                        _world.setRandomClients();
                    }
                    System.out.println("------------------------------Round " + Integer.toString(_round) + "------------------------------");
                    agent.go();

                    publish(_agentTurn);
                    try {
                        Thread.sleep((Integer) jSpeedSpinner.getValue());
                    } catch (InterruptedException ex) {
                        Thread.currentThread().interrupt();
                    }
                }
            }
            if (_round >= MAX_ROUNDS_MULTIPLIER * _agentList.size()) {
                gameEnded();
            } else {
                jRestartButton.setEnabled(true);
                jNextMoveButton.setEnabled(true);
            }

            return null;
        }

        protected void process(List<Integer> chunks) {
            for (Integer integer : chunks) {
                jScorePanel.setBorder(BorderFactory.createTitledBorder("Round " + Integer.toString(++_round)));
                updateWorld();
            }
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGUI().setVisible(true);
            }
        });
    }

    private final MessageConsole _mc;

    boolean _gameInProgress;
    long _longSeed;
    Random _rand;
    int _round;
    int _agentTurn;

    World _world;
    private List<List<JTextField>> _worldList;
    private List<Agent> _agentList;

    /**
     * Multiplier for the round limit depending on the number of agents.
     *
     * If for example we have 3 agents then there are going to be 300 rounds, if
     * there are 4 then 400 and so on and so forth.
     */
    private static final int MAX_ROUNDS_MULTIPLIER = 100;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jButtonsPanel;
    private javax.swing.JPanel jColumnNumberPanel;
    private javax.swing.JTextField jDonkeysScoreField;
    private javax.swing.JLabel jDonkeysScoreLabel;
    private javax.swing.JPanel jHeaderPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jMainPanel;
    private javax.swing.JScrollPane jMessageConsoleScrollPane;
    private javax.swing.JTextPane jMessageConsoleTextPane;
    private javax.swing.JButton jNextMoveButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jRestartButton;
    private javax.swing.JTextField jRoostersScoreField;
    private javax.swing.JLabel jRoostersScoreLabel;
    private javax.swing.JLabel jRow0Label;
    private javax.swing.JLabel jRow1Label;
    private javax.swing.JLabel jRow2Label;
    private javax.swing.JLabel jRow3Label;
    private javax.swing.JLabel jRow4Label;
    private javax.swing.JPanel jRowNumberPanel;
    private javax.swing.JPanel jScorePanel;
    private javax.swing.JLabel jSpeedLabel;
    private javax.swing.JSpinner jSpeedSpinner;
    private javax.swing.JToggleButton jStartButton;
    private javax.swing.JTextField jTextField00;
    private javax.swing.JTextField jTextField01;
    private javax.swing.JTextField jTextField02;
    private javax.swing.JTextField jTextField03;
    private javax.swing.JTextField jTextField04;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField20;
    private javax.swing.JTextField jTextField21;
    private javax.swing.JTextField jTextField22;
    private javax.swing.JTextField jTextField23;
    private javax.swing.JTextField jTextField24;
    private javax.swing.JTextField jTextField30;
    private javax.swing.JTextField jTextField31;
    private javax.swing.JTextField jTextField32;
    private javax.swing.JTextField jTextField33;
    private javax.swing.JTextField jTextField34;
    private javax.swing.JTextField jTextField40;
    private javax.swing.JTextField jTextField41;
    private javax.swing.JTextField jTextField42;
    private javax.swing.JTextField jTextField43;
    private javax.swing.JTextField jTextField44;
    private javax.swing.JPanel jWorldInterfacePanel;
    private javax.swing.JPanel jWorldPanel;
    // End of variables declaration//GEN-END:variables
}
